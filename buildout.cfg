[buildout]
parts =
    libevent
    gevent

    pcre
    varnish-build
    varnish
    varnish-config

    headers-module
    nginx-build
    nginx-config

    pyramid
    mongodb
#    rabbitmq
    test
    coverage-test
    coverage-report

    supervisor

extends = twitter.cfg 
          versions.cfg

versions = versions

eggs =
develop =

extensions = mr.developer
auto-checkout = *

[sources]
max = git https://github.com/UPCnet/max.git
bigmax = git https://github.com/UPCnet/bigmax.git
maxtalk = git https://github.com/UPCnet/maxtalk.git
#maxui = git https://github.com/UPCnet/max.ui.js.git egg=false

[downloads]
nginx = http://www.nginx.org/download/nginx-1.0.14.tar.gz
rabbitmq = http://www.rabbitmq.com/releases/rabbitmq-server/v2.7.1/rabbitmq-server-2.7.1.tar.gz
headers-module = https://github.com/agentzh/headers-more-nginx-module/tarball/v0.17rc1
varnish = http://repo.varnish-cache.org/source/varnish-3.0.3.tar.gz
pcre = http://downloads.sourceforge.net/project/pcre/pcre/8.31/pcre-8.31.tar.gz
libevent = https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz

[hosts]
nginx = 127.0.0.1
max = 127.0.0.1
bigmax = 127.0.0.1
maxtalk = 127.0.0.1

[ports]
nginx = 8080
max = 6543
bigmax = 6544
maxtalk = 6545
varnish = 80
varnish-telnet = 8889

[users]
main = pyramid
nginx = pyramid
gunicorn = pyramid
maxtalk = pyramid

[libevent]
recipe = zc.recipe.cmmi
url = ${downloads:libevent}

[gevent]
recipe = zc.recipe.egg:custom
include-dirs = ${libevent:location}/include
library-dirs = ${libevent:location}/lib

[gunicorn]
workers = 4
max-requests = 1000

[pyramid]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    pyramid
    gunicorn
    gevent
    max
    bigmax
    maxtalk
interpreter = py

[mongoconfig]
version = 2.0.4
port = 27017

[mongodb]
recipe = rod.recipe.mongodb
darwin-32bit-url = http://downloads.mongodb.org/osx/mongodb-osx-i386-${mongoconfig:version}.tgz
darwin-64bit-url = http://downloads.mongodb.org/osx/mongodb-osx-x86_64-${mongoconfig:version}.tgz
linux2-32bit-url = http://downloads.mongodb.org/linux/mongodb-linux-i686-${mongoconfig:version}.tgz
linux2-64bit-url = http://downloads.mongodb.org/linux/mongodb-linux-x86_64-${mongoconfig:version}.tgz
linux3-32bit-url = http://downloads.mongodb.org/linux/mongodb-linux-i686-${mongoconfig:version}.tgz
linux3-64bit-url = http://downloads.mongodb.org/linux/mongodb-linux-x86_64-${mongoconfig:version}.tgz
script_name = start_master.sh
quiet=false
fork=false
logpath=${buildout:directory}/var/log/mongodb.log
dbpath=${buildout:directory}/var/data
directoryperdb=true
master=true
update=true

# Twitter settings, from the unversioned twitter.cfg
# [twitter]
# username = maxupcnet
# password =

[rabbitmq]
recipe = rod.recipe.rabbitmq
url = ${downloads:rabbitmq}


[test]
recipe = zc.recipe.testrunner
eggs = max [test]
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']

[coverage-test]
recipe = zc.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']

[coverage-report]
recipe = zc.recipe.egg
eggs = createzopecoverage


## Varnish, build program , setup init script and generate configuration

[pcre]
recipe = hexagonit.recipe.cmmi
url = ${downloads:pcre}

[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
    PCRE_CFLAGS=-I${buildout:directory}/parts/pcre/include
    PCRE_LIBS="-L${buildout:directory}/parts/pcre/lib -lpcre"

[varnish]
recipe = plone.recipe.varnish
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
mode = foreground
bind = 0.0.0.0:${ports:varnish}
cache-size = 1G
#user = pyramid
config = ${buildout:directory}/production/varnish.conf
telnet = 0.0.0.0:${ports:varnish-telnet}

[varnish-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/varnish.conf.template
output = ${buildout:directory}/production/varnish.conf

## End VARNISH

## NGINX - build program and its module dependencies, and generate configuration

[headers-module]
recipe = hexagonit.recipe.download
url = ${downloads:headers-module}
strip-top-level-dir = true

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
configure-options =
    --with-http_stub_status_module
    --with-http_ssl_module
    --with-cc-opt=-I${pcre:location}/include --with-ld-opt=-L${pcre:location}/lib
    --add-module=${buildout:directory}/parts/headers-module
    --conf-path=${buildout:directory}/production/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/nginx-error.log
    --pid-path=${buildout:directory}/var/nginx.pid
    --lock-path=${buildout:directory}/var/nginx.lock

[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/nginx.conf.template
output = ${buildout:directory}/production/nginx.conf

## End NGINX

[supervisor]
recipe = collective.recipe.supervisor
port = 9101
user = admin
password = admin
serverurl = http://localhost:9101
programs =
    10 mongodb ${buildout:directory}/bin/mongod [--port ${mongoconfig:port} --dbpath ${buildout:directory}/var/data --master --logpath ${buildout:directory}/var/log/mongodb.log --directoryperdb --rest] true
#    10 rabbitmq ${buildout:directory}/bin/rabbitmq-server true
    15 celery ${buildout:directory}/bin/celeryd [--config=maxrules.config --loglevel=INFO] true
    20 max ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/src/max/production.ini --workers ${gunicorn:workers} --max-requests ${gunicorn:max-requests} --worker-class gevent --user ${users:gunicorn}] true
    20 bigmax ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/src/bigmax/production.ini --workers ${gunicorn:workers} --max-requests ${gunicorn:max-requests} --worker-class gevent --user ${users:gunicorn}] true
    20 maxrules (autostart=false) ${buildout:directory}/bin/maxrules.twitter [--twitter-username ${twitter:username} --twitter-password ${twitter:password} --mongodb-url mongodb://localhost --mongodb-name max] true
    20 maxtalk ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/src/maxtalk/production.ini --user ${users:gunicorn}] true
    30 nginx ${nginx-build:location}/sbin/nginx [-c ${buildout:directory}/production/nginx.conf]
    40 varnish ${buildout:directory}/bin/varnish true
